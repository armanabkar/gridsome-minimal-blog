{"hash":"06e584387a790dbcfb8adc0edabb1044b0d9180c","data":{"post":{"id":"35fa0a9a240fc313edc36c4b78722e6a","title":"SOLID Principles","content":"<h2 align=\"center\">\n  <img src=\"https://www.freecodecamp.org/news/content/images/size/w2000/2020/08/solid.png\" width=\"600px\" />\n  <br>\n</h2>\n<p>The SOLID Principles are five principles of Object-Oriented class design. They are a set of rules and best practices to follow while designing a class structure.</p>\n<p>These five principles help us understand the need for certain design patterns and software architecture in general. So I believe that it is a topic that every developer should learn.</p>\n<p>This article will teach you everything you need to know to apply SOLID principles to your projects.</p>\n<p>We will start by taking a look into the history of this term. Then we are going to get into the nitty-gritty details – the why's and how's of each principle – by creating a class design and improving it step by step.</p>\n<p>So grab a cup of coffee or tea and let's jump right in!</p>\n<h2 id=\"background\"><a href=\"#background\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Background</h2>\n<p>The SOLID principles were first introduced by the famous Computer Scientist Robert J. Martin (a.k.a Uncle Bob) in his <a href=\"https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paper</a> in 2000. But the SOLID acronym was introduced later by Michael Feathers.</p>\n<p>Uncle Bob is also the author of bestselling books Clean Code and Clean Architecture, and is one of the participants of the <a href=\"https://agilemanifesto.org/history.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"Agile Alliance\"</a>.</p>\n<p>Therefore, it is not a surprise that all these concepts of clean coding, object-oriented architecture, and design patterns are somehow connected and complementary to each other.</p>\n<p>They all serve the same purpose:</p>\n<blockquote>\n<p>\"To create understandable, readable, and testable code that many developers can collaboratively work on.\"</p>\n</blockquote>\n<p>Let's look at each principle one by one. Following the SOLID acronym, they are:</p>\n<ul>\n<li>The Single Responsibility Principle</li>\n<li>The Open-Closed Principle</li>\n<li>The Liskov Substitution Principle</li>\n<li>The Interface Segregation Principle</li>\n<li>The Dependency Inversion Principle</li>\n</ul>\n<h2 id=\"the-single-responsibility-principle\"><a href=\"#the-single-responsibility-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Single Responsibility Principle</h2>\n<p>The Single Responsibility Principle states that a class should do one thing and therefore it should have only a single reason to change.</p>\n<p>To state this principle more technically: Only one potential change (database logic, logging logic, and so on.) in the software’s specification should be able to affect the specification of the class.</p>\n<p>This means that if a class is a data container, like a Book class or a Student class, and it has some fields regarding that entity, it should change only when we change the data model.</p>\n<p>Following the Single Responsibility Principle is important. First of all, because many different teams can work on the same project and edit the same class for different reasons, this could lead to incompatible modules.</p>\n<p>Second, it makes version control easier. For example, say we have a persistence class that handles database operations, and we see a change in that file in the GitHub commits. By following the SRP, we will know that it is related to storage or database-related stuff.</p>\n<p>Merge conflicts are another example. They appear when different teams change the same file. But if the SRP is followed, fewer conflicts will appear – files will have a single reason to change, and conflicts that do exist will be easier to resolve.</p>\n<h3 id=\"common-pitfalls-and-anti-patterns\"><a href=\"#common-pitfalls-and-anti-patterns\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Common Pitfalls and Anti-patterns</h3>\n<p>In this section we will look at some common mistakes that violate the Single Responsibility Principle. Then we will talk about some ways to fix them.</p>\n<p>We will look at the code for a simple bookstore invoice program as an example. Let's start by defining a book class to use in our invoice.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> authorName<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> isbn<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> authorName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> price<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> isbn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authorName <span class=\"token operator\">=</span> authorName<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isbn <span class=\"token operator\">=</span> isbn<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This is a simple book class with some fields. Nothing fancy. I am not making fields private so that we don't need to deal with getters and setters and can focus on the logic instead.</p>\n<p>Now let's create the invoice class which will contain the logic for creating the invoice and calculating the total price. For now, assume that our bookstore only sells books and nothing else.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Invoice</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> discountRate<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> taxRate<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> total<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Invoice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> discountRate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> taxRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>book <span class=\"token operator\">=</span> book<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> quantity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>discountRate <span class=\"token operator\">=</span> discountRate<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taxRate <span class=\"token operator\">=</span> taxRate<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>total <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculateTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calculateTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>price <span class=\"token operator\">-</span> book<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> discountRate<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">double</span> priceWithTaxes <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> taxRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> priceWithTaxes<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printInvoice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>quantity <span class=\"token operator\">+</span> <span class=\"token string\">\"x \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span>          book<span class=\"token punctuation\">.</span>price <span class=\"token operator\">+</span> <span class=\"token string\">\"$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Discount Rate: \"</span> <span class=\"token operator\">+</span> discountRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tax Rate: \"</span> <span class=\"token operator\">+</span> taxRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total: \"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveToFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Creates a file with given name and writes the invoice</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here is our invoice class. It also contains some fields about invoicing and 3 methods:</p>\n<ul>\n<li>calculateTotal method, which calculates the total price,</li>\n<li>printInvoice method, that should print the invoice to console, and</li>\n<li>saveToFile method, responsible for writing the invoice to a file.</li>\n</ul>\n<p>You should give yourself a second to think about what is wrong with this class design before reading the next paragraph.</p>\n<p>Ok so what's going on here? Our class violates the Single Responsibility Principle in multiple ways.</p>\n<p>The first violation is the printInvoice method, which contains our printing logic. The SRP states that our class should only have a single reason to change, and that reason should be a change in the invoice calculation for our class.</p>\n<p>But in this architecture, if we wanted to change the printing format, we would need to change the class. This is why we should not have printing logic mixed with business logic in the same class.</p>\n<p>There is another method that violates the SRP in our class: the saveToFile method. It is also an extremely common mistake to mix persistence logic with business logic.</p>\n<p>Don't just think in terms of writing to a file – it could be saving to a database, making an API call, or other stuff related to persistence.</p>\n<p>So how can we fix this print function, you may ask.</p>\n<p>We can create new classes for our printing and persistence logic so we will no longer need to modify the invoice class for those purposes.</p>\n<p>We create 2 classes, InvoicePrinter and InvoicePersistence, and move the methods.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InvoicePrinter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InvoicePrinter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invoice <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">+</span> <span class=\"token string\">\"x \"</span> <span class=\"token operator\">+</span> invoice<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> invoice<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">.</span>price <span class=\"token operator\">+</span> <span class=\"token string\">\" $\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Discount Rate: \"</span> <span class=\"token operator\">+</span> invoice<span class=\"token punctuation\">.</span>discountRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tax Rate: \"</span> <span class=\"token operator\">+</span> invoice<span class=\"token punctuation\">.</span>taxRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total: \"</span> <span class=\"token operator\">+</span> invoice<span class=\"token punctuation\">.</span>total <span class=\"token operator\">+</span> <span class=\"token string\">\" $\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InvoicePersistence</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InvoicePersistence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invoice <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveToFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Creates a file with given name and writes the invoice</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now our class structure obeys the Single Responsibility Principle and every class is responsible for one aspect of our application. Great!</p>\n<h2 id=\"open-closed-principle\"><a href=\"#open-closed-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Open-Closed Principle</h2>\n<p>The Open-Closed Principle requires that classes should be open for extension and closed to modification.</p>\n<p>Modification means changing the code of an existing class, and extension means adding new functionality.</p>\n<p>So what this principle wants to say is: We should be able to add new functionality without touching the existing code for the class. This is because whenever we modify the existing code, we are taking the risk of creating potential bugs. So we should avoid touching the tested and reliable (mostly) production code if possible.</p>\n<p>But how are we going to add new functionality without touching the class, you may ask. It is usually done with the help of interfaces and abstract classes.</p>\n<p>Now that we have covered the basics of the principle, let's apply it to our Invoice application.</p>\n<p>Let's say our boss came to us and said that they want invoices to be saved to a database so that we can search them easily. We think okay, this is easy peasy boss, just give me a second!</p>\n<p>We create the database, connect to it, and we add a save method to our InvoicePersistence class:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InvoicePersistence</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InvoicePersistence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invoice <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveToFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Creates a file with given name and writes the invoice</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Saves the invoice to database</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Unfortunately we, as the lazy developer for the book store, did not design the classes to be easily extendable in the future. So in order to add this feature, we have modified the InvoicePersistence class.</p>\n<p>If our class design obeyed the Open-Closed principle we would not need to change this class.</p>\n<p>So, as the lazy but clever developer for the book store, we see the design problem and decide to refactor the code to obey the principle.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">InvoicePersistence</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We change the type of InvoicePersistence to Interface and add a save method. Each persistence class will implement this save method.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabasePersistence</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvoicePersistence</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Save to DB</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilePersistence</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvoicePersistence</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invoice</span> invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Save to file</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>So our class structure now looks like this:</p>\n<h2 align=\"center\">\n  <img src=\"https://erinc.io/wp-content/uploads/2020/08/SOLID-Tutorial-1-1024x554.jpeg\" width=\"600px\" />\n  <br>\n</h2>\n<p>Now our persistence logic is easily extendable. If our boss asks us to add another database and have 2 different types of databases like MySQL and MongoDB, we can easily do that.</p>\n<p>You may think that we could just create multiple classes without an interface and add a save method to all of them.</p>\n<p>But let's say that we extend our app and have multiple persistence classes like InvoicePersistence, BookPersistence and we create a PersistenceManager class that manages all persistence classes:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersistenceManager</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">InvoicePersistence</span> invoicePersistence<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BookPersistence</span> bookPersistence<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PersistenceManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvoicePersistence</span> invoicePersistence<span class=\"token punctuation\">,</span>\n                              <span class=\"token class-name\">BookPersistence</span> bookPersistence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invoicePersistence <span class=\"token operator\">=</span> invoicePersistence<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookPersistence <span class=\"token operator\">=</span> bookPersistence<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We can now pass any class that implements the InvoicePersistence interface to this class with the help of polymorphism. This is the flexibility that interfaces provide.</p>\n<h2 id=\"liskov-substitution-principle\"><a href=\"#liskov-substitution-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Liskov Substitution Principle</h2>\n<p>The Liskov Substitution Principle states that subclasses should be substitutable for their base classes.</p>\n<p>This means that, given that class B is a subclass of class A, we should be able to pass an object of class B to any method that expects an object of class A and the method should not give any weird output in that case.</p>\n<p>This is the expected behavior, because when we use inheritance we assume that the child class inherits everything that the superclass has. The child class extends the behavior but never narrows it down.</p>\n<p>Therefore, when a class does not obey this principle, it leads to some nasty bugs that are hard to detect.</p>\n<p>Liskov's principle is easy to understand but hard to detect in code. So let's look at an example.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We have a simple Rectangle class, and a getArea function which returns the area of the rectangle.</p>\n<p>Now we decide to create another class for Squares. As you might know, a square is just a special type of rectangle where the width is equal to the height.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\twidth <span class=\"token operator\">=</span> height <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Our Square class extends the Rectangle class. We set height and width to the same value in the constructor, but we do not want any client (someone who uses our class in their code) to change height or weight in a way that can violate the square property.</p>\n<p>Therefore we override the setters to set both properties whenever one of them is changed. But by doing that we have just violated the Liskov substitution principle.</p>\n<p>Let's create a main class to perform tests on the getArea function.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAreaTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rectangle</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      r<span class=\"token punctuation\">.</span><span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected area of \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", got \"</span> <span class=\"token operator\">+</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Rectangle</span> rc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getAreaTest</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">Rectangle</span> sq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sq<span class=\"token punctuation\">.</span><span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getAreaTest</span><span class=\"token punctuation\">(</span>sq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Your team's tester just came up with the testing function getAreaTest and tells you that your getArea function fails to pass the test for square objects.</p>\n<p>In the first test, we create a rectangle where the width is 2 and the height is 3 and call getAreaTest. The output is 20 as expected, but things go wrong when we pass in the square. This is because the call to setHeight function in the test is setting the width as well and results in an unexpected output.</p>\n<h2 id=\"interface-segregation-principle\"><a href=\"#interface-segregation-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Interface Segregation Principle</h2>\n<p>Segregation means keeping things separated, and the Interface Segregation Principle is about separating the interfaces.</p>\n<p>The principle states that many client-specific interfaces are better than one general-purpose interface. Clients should not be forced to implement a function they do no need.</p>\n<p>This is a simple principle to understand and apply, so let's see an example.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ParkingLot</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">parkCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Decrease empty spot count by 1</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">unparkCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Increase empty spots by 1</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Returns car capacity</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token function\">calculateFee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns the price based on number of hours</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">doPayment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We modeled a very simplified parking lot. It is the type of parking lot where you pay an hourly fee. Now consider that we want to implement a parking lot that is free.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FreeParking</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ParkingLot</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">parkCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unparkCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calculateFee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPayment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parking lot is free\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Our parking lot interface was composed of 2 things: Parking related logic (park car, unpark car, get capacity) and payment related logic.</p>\n<p>But it is too specific. Because of that, our FreeParking class was forced to implement payment-related methods that are irrelevant. Let's separate or segregate the interfaces.</p>\n<h2 align=\"center\">\n  <img src=\"https://erinc.io/wp-content/uploads/2020/08/SOLID-Tutorial-1024x432.png\" width=\"600px\" />\n  <br>\n</h2>\n<p>We've now separated the parking lot. With this new model, we can even go further and split the PaidParkingLot to support different types of payment.</p>\n<p>Now our model is much more flexible, extendable, and the clients do not need to implement any irrelevant logic because we provide only parking-related functionality in the parking lot interface.</p>\n<h2 id=\"dependency-inversion-principle\"><a href=\"#dependency-inversion-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dependency Inversion Principle</h2>\n<p>The Dependency Inversion principle states that our classes should depend upon interfaces or abstract classes instead of concrete classes and functions.</p>\n<p>In his <a href=\"https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">article</a> (2000), Uncle Bob summarizes this principle as follows:</p>\n<blockquote>\n<p>\"If the OCP states the goal of OO architecture, the DIP states the primary mechanism\".</p>\n</blockquote>\n<p>These two principles are indeed related and we have applied this pattern before while we were discussing the Open-Closed Principle.</p>\n<p>We want our classes to be open to extension, so we have reorganized our dependencies to depend on interfaces instead of concrete classes. Our PersistenceManager class depends on InvoicePersistence instead of the classes that implement that interface.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h2>\n<p>In this article, we started with the history of SOLID principles, and then we tried to acquire a clear understanding of the why's and how's of each principle. We even refactored a simple Invoice application to obey SOLID principles.</p>\n<p>I want to thank you for taking the time to read the whole article and I hope that the above concepts are clear.</p>\n<p>I suggest keeping these principles in mind while designing, writing, and refactoring your code so that your code will be much more clean, extendable, and testable.</p>\n<p><a href=\"https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source</a></p>\n","date":"14 April 2021","timeToRead":11}},"context":{}}